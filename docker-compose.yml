version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network

  eureka-server:
    build:
      context: .
      dockerfile: services/eureka-server/Dockerfile
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network

  config-server:
    build:
      context: .
      dockerfile: services/config-server/Dockerfile
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network

  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SPRING_REDIS_HOST=redis
      - JWT_SECRET=${JWT_SECRET:-your-very-strong-secret-key-here-must-be-at-least-256-bits-long-for-hs512-algorithm}
    depends_on:
      - postgres
      - redis
      - eureka-server
    networks:
      - ecommerce-network

  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/productdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SPRING_REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
      - eureka-server
    networks:
      - ecommerce-network

  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/orderdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SPRING_REDIS_HOST=redis
      - JWT_SECRET=${JWT_SECRET:-your-very-strong-secret-key-here-must-be-at-least-256-bits-long-for-hs512-algorithm}
    depends_on:
      - postgres
      - redis
      - eureka-server
    networks:
      - ecommerce-network

  ai-insights-service:
    build:
      context: .
      dockerfile: services/ai-insights-service/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aiinsightsdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SPRING_REDIS_HOST=redis
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-your-anthropic-api-key-here}
      - ANTHROPIC_BASE_URL=${ANTHROPIC_BASE_URL:-https://api.anthropic.com}
    depends_on:
      - postgres
      - redis
      - eureka-server
    networks:
      - ecommerce-network

  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_REDIS_HOST=redis
    depends_on:
      - user-service
      - product-service
      - order-service
      - redis
      - eureka-server
    networks:
      - ecommerce-network

  ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - gateway
    networks:
      - ecommerce-network

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=productdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks:
      - ecommerce-network

volumes:
  postgres_data:

networks:
  ecommerce-network:
    driver: bridge