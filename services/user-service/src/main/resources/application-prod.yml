spring:
  application:
    name: user-service
  profiles:
    active: prod
  
  # Database Configuration
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/userdb}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Redis Configuration
  data:
    redis:
      host: ${SPRING_REDIS_HOST:redis}
      port: 6379
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      database: 0
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000

  # Sleuth Configuration
  sleuth:
    zipkin:
      base-url: http://zipkin:9411
    sampler:
      probability: 1.0

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:your-very-strong-secret-key-here-must-be-at-least-256-bits-long-for-hs512-algorithm}
  expiration: ${JWT_EXPIRATION:86400000}

# Logging Configuration
logging:
  level:
    com.valven.ecommerce.userservice: INFO
    org.springframework: INFO
    org.springframework.security: WARN
    org.hibernate: WARN
    org.springframework.web: WARN
    org.springframework.cloud.sleuth: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

# Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,circuitbreakers
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: false