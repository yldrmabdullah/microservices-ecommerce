name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html

  # Code Security Scan
  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SpotBugs Security
        run: |
          mvn spotbugs:check
          mvn spotbugs:gui

      - name: Run PMD Security Rules
        run: |
          mvn pmd:check

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: code-security-reports
          path: target/

  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t valven/gateway:latest -f gateway/Dockerfile .
          docker build -t valven/user-service:latest -f services/user-service/Dockerfile .
          docker build -t valven/product-service:latest -f services/product-service/Dockerfile .
          docker build -t valven/order-service:latest -f services/order-service/Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'valven/gateway:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy on User Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'valven/user-service:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy on Product Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'valven/product-service:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy on Order Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'valven/order-service:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # DAST (Dynamic Application Security Testing)
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Application
        run: |
          docker-compose up -d
          sleep 120

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: 'zap-report.html'

  # Security Policy Check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Security Headers
        run: |
          curl -I http://localhost:8080 || echo "Service not running"
          # Add security header validation

      - name: Check SSL/TLS Configuration
        run: |
          # Add SSL/TLS configuration checks
          echo "SSL/TLS configuration check"

      - name: Check Authentication Configuration
        run: |
          # Add authentication configuration checks
          echo "Authentication configuration check"

  # Compliance Check
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check GDPR Compliance
        run: |
          echo "Checking GDPR compliance..."
          # Add GDPR compliance checks

      - name: Check PCI DSS Compliance
        run: |
          echo "Checking PCI DSS compliance..."
          # Add PCI DSS compliance checks

      - name: Check OWASP Top 10
        run: |
          echo "Checking OWASP Top 10 compliance..."
          # Add OWASP Top 10 checks

  # Security Notifications
  security-notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, container-scan, sast-scan, dast-scan]
    if: always()
    steps:
      - name: Notify Security Team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: failure()

      - name: Create Security Issue
        uses: actions/github-script@v6
        with:
          script: |
            if (context.payload.workflow_run.conclusion === 'failure') {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Security Scan Failed - ' + new Date().toISOString(),
                body: 'Security scan failed. Please check the logs and fix any security issues.',
                labels: ['security', 'bug', 'high-priority']
              });
            }
        if: failure()